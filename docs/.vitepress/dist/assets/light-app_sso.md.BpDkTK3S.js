import{_ as e,c as a,o as i,a5 as s,bd as t}from"./chunks/framework.D4ctqEPk.js";const _=JSON.parse('{"title":"单点登录","description":"","frontmatter":{},"headers":[],"relativePath":"light-app/sso.md","filePath":"light-app/sso.md"}'),o={name:"light-app/sso.md"},c=s('<h1 id="单点登录" tabindex="-1">单点登录 <a class="header-anchor" href="#单点登录" aria-label="Permalink to &quot;单点登录&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">阅读本文，你将了解：</p><ul><li>前端如何获取用户信息；</li><li>单点登录的完整流程。</li></ul></div><h2 id="什么是单点登录" tabindex="-1">什么是单点登录 <a class="header-anchor" href="#什么是单点登录" aria-label="Permalink to &quot;什么是单点登录&quot;">​</a></h2><p>第三方应用在接入 BeeWorks 平台时，往往需要集成 BeeWorks 的用户系统、应用通知等能力，而在使用这些能力之前，通常会对用户的合法性进行校验，此时就需要做“单点登录”验证。</p><p>目前 BeeWorks 实现单点登录的机制如下：</p><ol><li>客户端打开第三方应用时，第三方应用可以通过<code>js-sdk</code>或从<code>url</code>上获得临时 Ticket；</li><li>第三方应用后端服务通过<a href="/api/getStart.html">应用参数获取应用 Token</a>；</li><li>第三方应用后端服务根据客户端提交的 Ticket 参数，<a href="/api/auth.html">验证用户 Ticket</a> 的合法性；</li></ol><p>如果需要取得应用访问者的详细信息，前端可以提交<code>user_id</code>、<code>org_id</code>、<code>domain_id</code>等用户关键信息，后端即可通过开放接口获取该用户在平台上的详细信息。</p><div class="warning custom-block"><p class="custom-block-title">提示</p><p>“单点登录”的目的是为了验证用户的合法性，跟第三方应用是否能调用平台接口能力无关。第三方应用通过应用“key/secret”取得“应用Token”后，即可调用平台接口，例如推送应用消息、获取应用的使用范围等。</p></div><h2 id="单点登录流程" tabindex="-1">单点登录流程 <a class="header-anchor" href="#单点登录流程" aria-label="Permalink to &quot;单点登录流程&quot;">​</a></h2><p><img src="'+t+'" alt="单点登录流程解析"></p><h2 id="获取客户端用户信息" tabindex="-1">获取客户端用户信息 <a class="header-anchor" href="#获取客户端用户信息" aria-label="Permalink to &quot;获取客户端用户信息&quot;">​</a></h2><p>客户端作为“单点登录”的发起端，通常需要传递一些关键用户信息到对应应用的后端服务。而不同的端，获取用户信息的方式会不太一样。</p><h3 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h3><p>移动端通常会通过<code>js-sdk</code>接口进行获取，例如使用<code>w6s.auth.getUserTicket</code>及<code>w6s.contact.getCurrentUserInfo</code>方法来获取临时 Ticket 及当前登录的用户信息。</p><p>另一种方式，就是通过截取应用启动地址上的参数，具体设置请查看<a href="/light-app/create.html#启动地址">应用启动地址</a>。</p><h3 id="pc-客户端" tabindex="-1">PC 客户端 <a class="header-anchor" href="#pc-客户端" aria-label="Permalink to &quot;PC 客户端&quot;">​</a></h3><p>PC 客户端目前主要的方式就是截取应用启动地址上的参数，每个应用被打开时，客户端会获取临时 Ticket 及用户信息并拼接在应用启动地址上，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//test-app.beeworks.cn?ticket=ticket&amp;user_id=xxx&amp;domain_id=xx</span></span></code></pre></div><p>参数包括以下属性:</p><ul><li><code>ticket</code> 临时 Ticket</li><li><code>username</code> 用户名</li><li><code>user_id</code> 用户的 userId</li><li><code>domain_id</code> 用户当前所在的域</li><li><code>org_id</code> 用户当前所在的组织</li><li><code>nickname</code> 用户的昵称，注意转码</li><li><code>random</code> 随机数，一般为时间戳</li></ul><div class="warning custom-block"><p class="custom-block-title">应用启动地址</p><p>应用的启动地址，请尽可能遵照标准来设置。例如常见的单页面应用会使用<code>#hash</code>的方式做前端路由，但是<code>井号</code>在链接访问上是没有意义的，我们建议链接的属性，应该是先<code>search(query)</code>再<code>hash</code>，如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://www.beeworks.cn?key1=val1&amp;key2=val2#hash</span></span></code></pre></div></div>',21),l=[c];function d(p,r,h,n,k,u){return i(),a("div",null,l)}const b=e(o,[["render",d]]);export{_ as __pageData,b as default};
